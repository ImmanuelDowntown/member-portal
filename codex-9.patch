diff --git a/src/components/GroupJoinButton.tsx b/src/components/GroupJoinButton.tsx
index 457ffd3defc12af65fbd7da091bf10cab938ec51..2b629cba4f1a722c444e8df157c5771110d78e5c 100644
--- a/src/components/GroupJoinButton.tsx
+++ b/src/components/GroupJoinButton.tsx
@@ -62,62 +62,72 @@ export default function GroupJoinButton({ groupId, className = "" }: Props) {
         const mRef = collection(db, `users/${uid}/memberships`);
         const mQ = query(mRef, where("groupId", "==", groupId));
         const mSnap = await getDocs(mQ);
         if (!active) return;
         if (!mSnap.empty) {
           setStatus("member");
           return;
         }
         // 3) Pending request (user-owned path)
         const reqDoc = await getDoc(doc(db, `users/${uid}/membershipRequests/${groupId}`));
         if (!active) return;
         setStatus(reqDoc.exists() ? "pending" : "none");
       } catch (err) {
         console.warn("Unable to determine membership status; defaulting to 'none'.", err);
         if (active) setStatus("none");
       }
     }
     check();
     return () => { active = false; };
   }, [db, uid, groupId]);
 
   async function requestJoin() {
     if (!uid) return;
     setBusy(true);
     try {
+      let displayName = auth.currentUser?.displayName || "";
+      try {
+        const profile = await getDoc(doc(db, `users/${uid}`));
+        if (profile.exists()) {
+          displayName =
+            ((profile.data() as any)?.displayName as string | undefined) || displayName;
+        }
+      } catch {
+        /* ignore */
+      }
       // Write user-owned request
       await setDoc(
         doc(db, `users/${uid}/membershipRequests/${groupId}`),
-        { groupId, requestedAt: serverTimestamp() },
+        { groupId, requestedAt: serverTimestamp(), displayName },
         { merge: true }
       );
       setStatus("pending");
       // Mirror to group path (for admin review). If rules block it, we still stay pending on the user side.
       try {
         await setDoc(
           doc(db, `groups/${groupId}/membershipRequests/${uid}`),
-          { uid, requestedAt: serverTimestamp() },
+          { uid, requestedAt: serverTimestamp(), displayName },
           { merge: true }
         );
       } catch (e) {
         console.warn("Could not mirror to group joinRequests; ensure rules allow create.", e);
       }
     } finally {
       setBusy(false);
     }
   }
 
   async function cancelRequest() {
     if (!uid) return;
     setBusy(true);
     try {
       await deleteDoc(doc(db, `users/${uid}/membershipRequests/${groupId}`));
       try { await deleteDoc(doc(db, `groups/${groupId}/membershipRequests/${uid}`)); } catch {}
       setStatus("none");
     } finally {
       setBusy(false);
     }
   }
 
   // Render states
   if (status === "checking") {
     return (
