rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- Helper functions ----------
    function isSignedIn() {
      return request.auth != null;
    }
    function uid() {
      return request.auth.uid;
    }
    function isSuperAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(uid()));
    }
    function isApproved() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(uid())).data.isCommunityApproved == true;
    }
    function isGroupAdmin(groupId) {
      // Group admins tracked at groups/{groupId}/groupAdmins/{uid}
      return isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/groupAdmins/$(uid()));
    }
    function isMemberOf(groupId) {
      // Membership tracked at groups/{groupId}/members/{uid}
      return isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(uid()));
    }

    // ---------- Users ----------
    match /users/{userUid} {
      // Read: user reads own doc; super admin can read any
      allow get: if isSignedIn() && (userUid == uid() || isSuperAdmin());
      // List: super admin may list
      allow list: if isSuperAdmin();

      // Write: user may update own profile; super admin can update any
      allow create, update: if isSignedIn() && (userUid == uid() || isSuperAdmin());
      // Delete: super admin only (use function to soft-delete or admin tool)
      allow delete: if isSuperAdmin();

      // Subcollection: user's memberships (used by Groups page, DM compose)
      match /memberships/{groupId} {
        // Read/list: owner or super admin
        allow get, list: if isSignedIn() && (userUid == uid() || isSuperAdmin());
        // Create/update/delete: owner; or group admin/super admin
        allow create, update, delete: if isSignedIn() && (userUid == uid() || isGroupAdmin(groupId) || isSuperAdmin());
      }

      // NEW: user's membership requests (source of truth for request status in UI)
      match /membershipRequests/{groupId} {
        // Owner can create/cancel and read their own request; super admin may read
        allow create: if isSignedIn() && userUid == uid();
        allow delete: if isSignedIn() && userUid == uid();
        allow get, list: if isSignedIn() && (userUid == uid() || isSuperAdmin());
        allow update: if false;
      }

      // Optional: thread read markers for message threads
      match /threadReads/{key} {
        allow read, list: if isSignedIn() && userUid == uid();
        allow create, update, delete: if isSignedIn() && userUid == uid();
      }

      // User notifications
      match /notifications/{notifId} {
        // Users can read and update their own notifications
        allow get, list, update: if isSignedIn() && userUid == uid();
        // Creation/deletion should occur via server processes only
        allow create, delete: if false;
      }
    }

    // ---------- Groups (public read; writes via admins) ----------
    match /groups/{groupId} {
      // Group metadata is readable to signed-in users (adjust to "true" if public site)
      allow get, list: if isSignedIn() || isSuperAdmin();

      // Group core write operations (admins only)
      allow create, update, delete: if isSuperAdmin() || isGroupAdmin(groupId);

      // Memberships under group (UID docs)
      match /members/{memberUid} {
        // Members can read the roster of a group they belong to; admins & super admins too
        allow get, list: if isSignedIn() && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin());
        // Writes by group admins or super admin
        allow create, update, delete: if isSignedIn() && (isGroupAdmin(groupId) || isSuperAdmin());
      }

      // NEW: mirrored membership requests under the group (for admin review)
      match /membershipRequests/{requestUid} {
        // A signed-in user may mirror their own request here
        allow create: if isSignedIn() && requestUid == uid();
        // User may withdraw their own request; admins may also delete (approve/deny workflow)
        allow delete: if isSignedIn() && (requestUid == uid() || isGroupAdmin(groupId) || isSuperAdmin());
        // Group admins and super admins can read/list pending requests
        allow get, list: if isGroupAdmin(groupId) || isSuperAdmin();
        allow update: if false;
      }

      // Group admin assignments
      match /groupAdmins/{adminUid} {
        // Group admins and super admins can see the admin roster
        allow get, list: if isSignedIn() && (isGroupAdmin(groupId) || isSuperAdmin());
        // Only super admins may modify group admins
        allow create, update, delete: if isSignedIn() && isSuperAdmin();
      }

      // Group resources (docs/files metadata)
      match /resources/{resourceId} {
        // Anyone signed-in may read group resources
        allow get, list: if isSignedIn();
        // Create/update/delete by group admin or super admin
        allow create, update, delete: if isSignedIn() && (isGroupAdmin(groupId) || isSuperAdmin());
      }

      // Group messages (feed)
      match /messages/{messageId} {
        // Members, group admins, or super admins can read & create
        allow get, list: if isSignedIn() && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin());
        allow create: if isSignedIn() && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin());
        // Edit/delete your own message or admin/super
        allow update, delete: if isSignedIn()
          && (
            (resource.data.uid == uid()) ||
            isGroupAdmin(groupId) || isSuperAdmin()
          );

        // Replies to a message
        match /replies/{replyId} {
          allow get, list: if isSignedIn() && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin());
          allow create: if isSignedIn() && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin());
          allow update, delete: if isSignedIn()
            && (
              (resource.data.uid == uid()) ||
              isGroupAdmin(groupId) || isSuperAdmin()
            );
        }
      }

      // Direct messages metadata: groups/{groupId}/directMessages/{pairId}
      match /directMessages/{pairId} {
        // Read/list allowed only for approved users who are participants; or super admin
        allow get, list: if isSignedIn() && (isApproved() || isSuperAdmin())
          && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin())
          && request.auth.uid in resource.data.users;

        // Create/update by participants (must include self in `users`), and approved or super admin
        allow create, update: if isSignedIn() && (isApproved() || isSuperAdmin())
          && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin())
          && request.resource.data.users.hasAll([request.auth.uid]);

        // Messages for a DM thread
        match /messages/{msgId} {
          // Read/list: participant only; and approved or super admin
          allow get, list: if isSignedIn() && (isApproved() || isSuperAdmin())
            && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin())
            && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)/directMessages/$(pairId)).data.users;

          // Create: sender must be the signed-in user; and approved or super admin
          allow create: if isSignedIn() && (isApproved() || isSuperAdmin())
            && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin())
            && request.resource.data.from == uid();

          // Updates/deletes are not generally allowed
          allow update: if false;
          allow delete: if isSignedIn() && (isApproved() || isSuperAdmin())
            && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin())
            && (resource.data.from == uid() || isSuperAdmin());
        }
      }
    }

    // ---------- Sunday resources ----------
    match /sundayResources/{resourceId} {
      // All signed-in users may view Sunday resources
      allow get, list: if isSignedIn();
      // Only super admins may create, update, or delete resources
      allow create, update, delete: if isSuperAdmin();
    }


    // ---------- Super admin registry ----------
    match /admins/{adminUid} {
      allow get: if isSignedIn() && (adminUid == uid() || isSuperAdmin());
      allow list: if isSuperAdmin();
      allow write: if isSuperAdmin();
    }

    // >>> INSERTED: Global Direct Messages (new, does not affect other rules) <<<
    // Threads: /dmThreads/{pairId}
    match /dmThreads/{pairId} {
      // Participants (or super admin) can read
      allow get, list: if isSignedIn() && (isApproved() || isSuperAdmin())
        && (uid() in resource.data.users || isSuperAdmin());

      // Create: exactly two users, and the caller must be one of them
      allow create: if isSignedIn() && (isApproved() || isSuperAdmin())
        && request.resource.data.users is list
        && request.resource.data.users.size() == 2
        && uid() in request.resource.data.users;

      // Update: only participants (or super admin); users array cannot change
      allow update: if isSignedIn() && (isApproved() || isSuperAdmin())
        && (uid() in resource.data.users || isSuperAdmin())
        && request.resource.data.users == resource.data.users;

      // Delete: super admin only
      allow delete: if isSuperAdmin();
    }

    // Messages: /dmMessages/{pairId}/messages/{msgId}
    match /dmMessages/{pairId} {
      match /messages/{msgId} {
        // Read: participants or super admin
        allow get, list: if isSignedIn() && (isApproved() || isSuperAdmin())
          && (uid() in get(/databases/$(database)/documents/dmThreads/$(pairId)).data.users
              || isSuperAdmin());

        // Create: sender must be the authed user and both are participants
        // (No strict check on createdAt to allow serverTimestamp())
        allow create: if isSignedIn() && (isApproved() || isSuperAdmin())
          && (uid() in get(/databases/$(database)/documents/dmThreads/$(pairId)).data.users)
          && request.resource.data.from == uid()
          && request.resource.data.to in get(/databases/$(database)/documents/dmThreads/$(pairId)).data.users
          && (request.resource.data.text is string);

        // No edits; allow delete by sender or super admin
        allow update: if false;
        allow delete: if isSignedIn() && (resource.data.from == uid() || isSuperAdmin());
      }
    }

    // ---------- Public access overrides ----------
    // Sunday White Papers (slug: sunday-resources) – allow public read by ID in common locations
    match /pages/{pageId} {
      allow get: if pageId == "sunday-resources";
      allow list: if false;
      allow create, update, delete: if false;
    }
    match /resources/{resId} {
      allow get: if resId == "sunday-resources";
      allow list: if false;
      allow create, update, delete: if false;
    }
    match /groups/{groupId}/resources/sunday-resources {
      allow get: if true;
      allow list, create, update, delete: if false;
    }
    // Fallback: allow public read (get AND list) anywhere the document's slug equals "sunday-resources".
    match /{path=**} {
      allow get, list: if resource.data.slug == "sunday-resources";
      allow create, update, delete: if false;
    }

    // ---------- Catch‑all: super admin may read anything (queries & gets) ----------
    match /{document=**} {
      allow read: if isSuperAdmin();
    }
  }
}