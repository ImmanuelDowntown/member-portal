
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- Helper functions ----------
    function isSignedIn() {
      return request.auth != null;
    }
    function uid() {
      return request.auth.uid;
    }
    function isSuperAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(uid()));
    }
    function isApproved() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(uid())).data.isCommunityApproved == true;
    }
    function isGroupAdmin(groupId) {
      // Group admins tracked at groups/{groupId}/admins/{uid}
      return isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/admins/$(uid()));
    }
    function isMemberOf(groupId) {
      // Membership tracked at groups/{groupId}/members/{uid}
      return isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/members/$(uid()));
    }

    // ---------- Users ----------
    match /users/{userUid} {
      // Read: user reads own doc; super admin can read any
      allow get: if isSignedIn() && (userUid == uid() || isSuperAdmin());
      // List: super admin may list
      allow list: if isSuperAdmin();

      // Write: user may update own profile; super admin can update any
      allow create, update: if isSignedIn() && (userUid == uid() || isSuperAdmin());
      // Delete: super admin only (use function to soft-delete or admin tool)
      allow delete: if isSuperAdmin();

      // Subcollection: user's memberships (used by Groups page, DM compose)
      match /memberships/{groupId} {
        // Read/list: owner or super admin
        allow get, list: if isSignedIn() && (userUid == uid() || isSuperAdmin());
        // Create/update/delete: owner; or group admin/super admin
        allow create, update, delete: if isSignedIn() && (userUid == uid() || isGroupAdmin(groupId) || isSuperAdmin());
      }

      // Optional: thread read markers for message threads
      match /threadReads/{key} {
        allow read, list: if isSignedIn() && userUid == uid();
        allow create, update, delete: if isSignedIn() && userUid == uid();
      }
    }

    // ---------- Groups (public read; writes via admins) ----------
    match /groups/{groupId} {
      // Group metadata is readable to signed-in users (adjust to "true" if public site)
      allow get, list: if isSignedIn() || isSuperAdmin();

      // Group core write operations (admins only)
      allow create, update, delete: if isSuperAdmin() || isGroupAdmin(groupId);

      // Memberships under group (UID docs)
      match /members/{memberUid} {
        // Members can read the roster of a group they belong to; admins & super admins too
        allow get, list: if isSignedIn() && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin());
        // Writes by group admins or super admin
        allow create, update, delete: if isSignedIn() && (isGroupAdmin(groupId) || isSuperAdmin());
      }

      // Group resources (docs/files metadata)
      match /resources/{resourceId} {
        // Anyone signed-in may read group resources
        allow get, list: if isSignedIn();
        // Create/update/delete by group admin or super admin
        allow create, update, delete: if isSignedIn() && (isGroupAdmin(groupId) || isSuperAdmin());
      }

      // Group messages (feed)
      match /messages/{messageId} {
        // Members, group admins, or super admins can read & create
        allow get, list: if isSignedIn() && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin());
        allow create: if isSignedIn() && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin());
        // Edit/delete your own message or admin/super
        allow update, delete: if isSignedIn()
          && (
            (resource.data.uid == uid()) ||
            isGroupAdmin(groupId) || isSuperAdmin()
          );

        // Replies to a message
        match /replies/{replyId} {
          allow get, list: if isSignedIn() && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin());
          allow create: if isSignedIn() && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin());
          allow update, delete: if isSignedIn()
            && (
              (resource.data.uid == uid()) ||
              isGroupAdmin(groupId) || isSuperAdmin()
            );
        }
      }

      // Direct messages metadata: groups/{groupId}/directMessages/{pairId}
      match /directMessages/{pairId} {
        // Read/list allowed only for approved users who are participants; or super admin
        allow get, list: if isSignedIn() && (isApproved() || isSuperAdmin())
          && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin())
          && request.auth.uid in resource.data.users;

        // Create/update by participants (must include self in `users`), and approved or super admin
        allow create, update: if isSignedIn() && (isApproved() || isSuperAdmin())
          && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin())
          && request.resource.data.users.hasAll([request.auth.uid]);

        // Messages for a DM thread
        match /messages/{msgId} {
          // Read/list: participant only; and approved or super admin
          allow get, list: if isSignedIn() && (isApproved() || isSuperAdmin())
            && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin())
            && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)/directMessages/$(pairId)).data.users;

          // Create: sender must be the signed-in user; and approved or super admin
          allow create: if isSignedIn() && (isApproved() || isSuperAdmin())
            && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin())
            && request.resource.data.from == uid();

          // Updates/deletes are not generally allowed
          allow update: if false;
          allow delete: if isSignedIn() && (isApproved() || isSuperAdmin())
            && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin())
            && (resource.data.from == uid() || isSuperAdmin());
        }
      }
    }

    // ---------- Super admin registry ----------
    match /admins/{adminUid} {
      allow get: if isSignedIn() && (adminUid == uid() || isSuperAdmin());
      allow list: if isSuperAdmin();
      allow write: if isSuperAdmin();
    }

    // ---------- Catchâ€‘all: super admin may read anything (queries & gets) ----------
    match /{document=**} {
      allow read: if isSuperAdmin();
    }
  }
}
