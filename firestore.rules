rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- Helpers
    function isSignedIn() {
      return request.auth != null;
    }
    function uid() {
      return request.auth.uid;
    }
    function isSuperAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(uid()));
    }
    function isGroupAdmin(groupId) {
      return isSignedIn() && exists(/databases/$(database)/documents/groups/$(groupId)/groupAdmins/$(uid()));
    }
    function isMemberOf(groupId) {
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(uid())/memberships/$(groupId));
    }

match /sundayResources/{resId} {
  allow read: if isSignedIn();
  allow create, update, delete: if isSuperAdmin();
}


    // ---------- Groups root
    match /groups/{groupId} {
      // Anyone signed in can read group metadata (for Explore, etc.)
      allow read: if isSignedIn();

      // Only SUPER admins can create/update/delete groups
      allow create, update, delete: if isSuperAdmin();

      // Members subcollection
      match /members/{memberUid} {
        allow read: if isSignedIn();
        allow write: if isGroupAdmin(groupId) || isSuperAdmin();
      }

      // Resources (links, docs, videos) for this group
      match /resources/{resId} {
        // Members can read; group admins & super admins can create/update/delete
        allow read: if isSignedIn() && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin());
        allow create, update, delete: if isGroupAdmin(groupId) || isSuperAdmin();
      }

      // Group chat messages
      match /messages/{msgId} {
        allow read: if isSignedIn() && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin());
        allow create: if isSignedIn() && (isMemberOf(groupId) || isGroupAdmin(groupId) || isSuperAdmin());
        allow update, delete: if isGroupAdmin(groupId) || isSuperAdmin() || (isSignedIn() && request.auth.uid == resource.data.uid);
      }

      // Direct messages scoped under the group
      match /directMessages/{pairId} {
        match /messages/{dmId} {
          // Only the two participants in the pair can read/write; also require membership
          allow read, create: if isSignedIn()
            && isMemberOf(groupId)
            && (pairId.matches('^' + uid() + '_.+$') || pairId.matches('^.+_' + uid() + '$'));
          allow delete: if isSignedIn()
            && (pairId.matches('^' + uid() + '_.+$') || pairId.matches('^.+_' + uid() + '$') || isGroupAdmin(groupId) || isSuperAdmin());
        }
      }

      // Group admins subcollection
      match /groupAdmins/{adminUid} {
        allow read: if isGroupAdmin(groupId) || isSuperAdmin();
        // Only SUPER admins can grant/revoke group admins
        allow write: if isSuperAdmin();
      }

      // Membership requests
      match /membershipRequests/{requestUid} {
        // User can read their own request; group/super admins can read all
        allow read: if isSignedIn() && (
          requestUid == uid() ||
          isGroupAdmin(groupId) ||
          isSuperAdmin()
        );
        // User can create/cancel their own; admins can manage any
        allow create, update, delete: if isSignedIn() && (
          requestUid == uid() ||
          isGroupAdmin(groupId) ||
          isSuperAdmin()
        );
      }

      // Events / audit log
      match /groupEvents/{eventId} {
        allow read, write: if isGroupAdmin(groupId) || isSuperAdmin();
      }
    }

    // ---------- Users (per-user data)
    match /users/{userUid} {
      // Users can manage their own profile doc
      allow read, create, update, delete: if isSignedIn() && userUid == uid();

      // Memberships mirror (used when approving)
      match /memberships/{groupId} {
        allow read, write: if isSignedIn() && (userUid == uid() || isGroupAdmin(groupId) || isSuperAdmin());
      }

      // User-scoped requests mirror (optional)
      match /membershipRequests/{groupId} {
        allow read, write, delete: if isSignedIn() && (
          userUid == uid() ||
          isGroupAdmin(groupId) ||
          isSuperAdmin()
        );
      }

      // Notifications
      match /notifications/{notifId} {
        // Read/update/delete by the owner; creation happens via Admin SDK (Cloud Functions)
        allow read, update, delete: if isSignedIn() && userUid == uid();
      }
    }

    // ---------- Super admin registry
    match /admins/{adminUid} {
      allow read: if isSignedIn() && (adminUid == uid() || isSuperAdmin());
      allow write: if isSuperAdmin();
    }

    // ---------- Default deny for any paths not matched above
  }
}
